from mpl_toolkits.mplot3d import axes3d,Axes3D
import matplotlib.pyplot as plt
import pandas as pd

file = 'C:\\Users\Desktop\huatu.txt'
data = pd.read_csv(file, sep="\t")


# print(data)
def sample_x():  # 取出x轴数据
    df = []
    sample_type1 = data.group.unique()
    for i in sample_type1:
        a = data.concentration[data.group == i]
        df.append(a)
    return df


x1, x2, x3, x4 = sample_x()[0], sample_x()[1], sample_x()[2], sample_x()[3]


def sample_y():  # 取出y轴数据
    df1 = []
    sample_type1 = data.group.unique()
    for i in sample_type1:
        b = data.time[data.group == i]
        df1.append(b)
    return df1


y1, y2, y3, y4 = sample_y()[0], sample_y()[1], sample_y()[2], sample_y()[3]


def sample_z():  # 取出z轴数据
    df2 = []
    sample_type1 = data.group.unique()
    for i in sample_type1:
        c = data.OD600[data.group == i]
        df2.append(c)
    return df2


z1, z2, z3, z4 = sample_z()[0], sample_z()[1], sample_z()[2], sample_z()[3]

# new a figure and set it into 3d
fig = plt.figure()
ax = fig.gca(projection='3d')

# set figure information
ax.set_title("3D")
ax.set_xlabel("X")
ax.set_ylabel("Y")
ax.set_zlabel("Z")

# draw the figure, the color is r = read
figure1 = ax.plot(x1, y1, z1, c='r')
figure2 = ax.plot(x2, y2, z2, c='b')
figure3 = ax.plot(x3, x3, z3, c='g')
figure4 = ax.plot(x4, x4, z4, c='y')

plt.show()